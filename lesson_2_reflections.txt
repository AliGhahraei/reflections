-- What happens when you initialize a repository? Why do you need to do it?
* 
  1) Git creates its metadata in that directory in order to keep track of changes.
  2) This way you can use git with a new project or with a project without version control.


-- How is the staging area different from the working directory and the repository? What value do you think it offers?

* It is different from the working directory and the repository because it is only used as an intermediate state. It allows us to have deeper control over the content of our commits.


-- How can you use the staging area to make sure you have one commit per logical change?
* You can modify whatever you want and then use the staging area to make sense out of it.


-- What are some situations when branches would be helpful in keeping your history organized? How would branches help?
* When you add new functionality and you don't know if it's stable, when you do some change but you think that it can be done in a better way or when you want to have several versions of a program for different audiences (developer, end user, etc.). Branches keep these changes organized and make the whole process easier.


-- How do the diagrams help you visualize the branch structure?
* They help you to see where the commits diverge and where they would best merge in a nice and simple way, so you don't get confused with ids


-- What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
* The result is introducing all the changes from branch 1 into branch 2. We do it that way because it helps us to identify the key commits that we need to take into account.

-- What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
* Automatic merging could introduce subtle bugs but it's faster. Manual merging gives you more control but it's slower
